stop slave;
drop table if exists t1,t2,t3,t4,t5,t6,t7,t8,t9;
reset master;
reset slave;
drop table if exists t1,t2,t3,t4,t5,t6,t7,t8,t9;
start slave;
set session sql_log_bin=0;
delete from mysql.user where Host='fakehost';
set session sql_log_bin=1;
set session sql_log_bin=0;
delete from mysql.user where Host='fakehost';
set session sql_log_bin=1;
create user 'foo'@'fakehost';
create user 'foo'@'fakehost', 'bar'@'fakehost';
ERROR HY000: Operation CREATE USER failed for 'foo'@'fakehost'
create user 'foo'@'fakehost', 'bar'@'fakehost';
ERROR HY000: Operation CREATE USER failed for 'foo'@'fakehost','bar'@'fakehost'
select Host,User from mysql.user where Host='fakehost';
Host	User
fakehost	bar
fakehost	foo
rename user 'foo'@'fakehost' to 'foofoo'@'fakehost';
rename user 'not_exist_user1'@'fakehost' to 'foobar'@'fakehost', 'bar'@'fakehost' to 'barbar'@'fakehost';
ERROR HY000: Operation RENAME USER failed for 'not_exist_user1'@'fakehost'
rename user 'not_exist_user1'@'fakehost' to 'foobar'@'fakehost', 'not_exist_user2'@'fakehost' to 'barfoo'@'fakehost';
ERROR HY000: Operation RENAME USER failed for 'not_exist_user1'@'fakehost','not_exist_user2'@'fakehost'
select Host,User from mysql.user where Host='fakehost';
Host	User
fakehost	barbar
fakehost	foofoo
drop user 'foofoo'@'fakehost';
drop user 'not_exist_user1'@'fakehost', 'barbar'@'fakehost';
ERROR HY000: Operation DROP USER failed for 'not_exist_user1'@'fakehost'
drop user 'not_exist_user1'@'fakehost', 'not_exist_user2'@'fakehost';
ERROR HY000: Operation DROP USER failed for 'not_exist_user1'@'fakehost','not_exist_user2'@'fakehost'
select Host,User from mysql.user where Host='fakehost';
Host	User
show binlog events from <binlog_start>;
Log_name	Pos	Event_type	Server_id	End_log_pos	Info
master-bin.000001	#	Query	#	#	use `test`; create user 'foo'@'fakehost'
master-bin.000001	#	Query	#	#	use `test`; create user 'foo'@'fakehost', 'bar'@'fakehost'
master-bin.000001	#	Query	#	#	use `test`; RENAME USER 'foo'@'fakehost' TO 'foofoo'@'fakehost'
master-bin.000001	#	Query	#	#	use `test`; RENAME USER 'not_exist_user1'@'fakehost' TO 'foobar'@'fakehost', 'bar'@'fakehost' TO 'barbar'@'fakehost'
master-bin.000001	#	Query	#	#	use `test`; DROP USER 'foofoo'@'fakehost'
master-bin.000001	#	Query	#	#	use `test`; DROP USER 'not_exist_user1'@'fakehost', 'barbar'@'fakehost'



TEST STATEMENT: 'RENAME USER $users_list'
--------------------------------------------------------------------------
CREATE VIEW test.bug48321_v1 AS SELECT user FROM mysql.user
WHERE user LIKE 'bug48321%';

TEST STATEMENT: 'RENAME USER $users_list'
CASE 1:
-------
# Only CURRENT_USER() in the user list of the test statement.
users_list= CURRENT_USER() TO 'bug48321_4'@'localhost'

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

RENAME USER CURRENT_USER() TO 'bug48321_4'@'localhost';

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'RENAME USER $users_list'
CASE 2:
-------
# Two users are in the test statement, CURRENT_USER is the first one.
users_list= CURRENT_USER() TO 'bug48321_4'@'localhost', 'bug48321_2'@'localhost' TO 'bug48321_5'@'localhost'

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

RENAME USER CURRENT_USER() TO 'bug48321_4'@'localhost', 'bug48321_2'@'localhost' TO 'bug48321_5'@'localhost';

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'RENAME USER $users_list'
CASE 3:
-------
# Two users are in the test statement, CURRENT_USER is the last one.
users_list= 'bug48321_2'@'localhost' TO 'bug48321_5'@'localhost', CURRENT_USER() TO 'bug48321_4'@'localhost'

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

RENAME USER 'bug48321_2'@'localhost' TO 'bug48321_5'@'localhost', CURRENT_USER() TO 'bug48321_4'@'localhost';

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'RENAME USER $users_list'
CASE 4:
-------
# Three users are in the test statement, CURRENT_USER is the second one.
users_list= 'bug48321_2'@'localhost' TO 'bug48321_5'@'localhost', CURRENT_USER() TO 'bug48321_4'@'localhost', 'bug48321_3'@'localhost' TO 'bug48321_6'@'localhost'

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

RENAME USER 'bug48321_2'@'localhost' TO 'bug48321_5'@'localhost', CURRENT_USER() TO 'bug48321_4'@'localhost', 'bug48321_3'@'localhost' TO 'bug48321_6'@'localhost';

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'RENAME USER $users_list'
CASE 5:
-------
# CURRENT_USER is not in the test statement.
users_list= 'bug48321_2'@'localhost' TO 'bug48321_5'@'localhost', 'bug48321_3'@'localhost' TO 'bug48321_6'@'localhost'

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

RENAME USER 'bug48321_2'@'localhost' TO 'bug48321_5'@'localhost', 'bug48321_3'@'localhost' TO 'bug48321_6'@'localhost';

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;
DROP VIEW test.bug48321_v1;



TEST STATEMENT: 'DROP USER $users_list'
--------------------------------------------------------------------------
CREATE VIEW test.bug48321_v1 AS SELECT user FROM mysql.user
WHERE user LIKE 'bug48321%';

TEST STATEMENT: 'DROP USER $users_list'
CASE 1:
-------
# Only CURRENT_USER() in the user list of the test statement.
users_list= CURRENT_USER()

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

DROP USER CURRENT_USER();

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'DROP USER $users_list'
CASE 2:
-------
# Two users are in the test statement, CURRENT_USER is the first one.
users_list= CURRENT_USER(), 'bug48321_2'@'localhost'

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

DROP USER CURRENT_USER(), 'bug48321_2'@'localhost';

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'DROP USER $users_list'
CASE 3:
-------
# Two users are in the test statement, CURRENT_USER is the last one.
users_list= 'bug48321_2'@'localhost', CURRENT_USER()

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

DROP USER 'bug48321_2'@'localhost', CURRENT_USER();

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'DROP USER $users_list'
CASE 4:
-------
# Three users are in the test statement, CURRENT_USER is the second one.
users_list= 'bug48321_2'@'localhost', CURRENT_USER(), 'bug48321_3'@'localhost'

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

DROP USER 'bug48321_2'@'localhost', CURRENT_USER(), 'bug48321_3'@'localhost';

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'DROP USER $users_list'
CASE 5:
-------
# CURRENT_USER is not in the test statement.
users_list= 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

DROP USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost';

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;
DROP VIEW test.bug48321_v1;
DROP PROCEDURE IF EXISTS f1;
CREATE PROCEDURE p1() SELECT 1;



TEST STATEMENT: 'REVOKE ALL PRIVILEGES, GRANT OPTION FROM $users_list'
--------------------------------------------------------------------------
CREATE VIEW test.bug48321_v1 AS SELECT user, Select_priv, Update_priv, Create_priv, Drop_priv, Grant_priv
FROM mysql.user WHERE user LIKE 'bug48321%';

TEST STATEMENT: 'REVOKE ALL PRIVILEGES, GRANT OPTION FROM $users_list'
CASE 1:
-------
# Only CURRENT_USER() in the user list of the test statement.
users_list= CURRENT_USER()

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

# Grant some privileges to users at first when testing 
# 'REVOKE ...' statement.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_2'@'localhost',
'bug48321_3'@'localhost' WITH GRANT OPTION;
GRANT ALTER ROUTINE, EXECUTE ON PROCEDURE p1 TO 'bug48321_1'@'localhost',
'bug48321_2'@'localhost', 'bug48321_3'@'localhost';

REVOKE ALL PRIVILEGES, GRANT OPTION FROM CURRENT_USER();

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'REVOKE ALL PRIVILEGES, GRANT OPTION FROM $users_list'
CASE 2:
-------
# Two users are in the test statement, CURRENT_USER is the first one.
users_list= CURRENT_USER(), 'bug48321_2'@'localhost'

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

# Grant some privileges to users at first when testing 
# 'REVOKE ...' statement.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_2'@'localhost',
'bug48321_3'@'localhost' WITH GRANT OPTION;
GRANT ALTER ROUTINE, EXECUTE ON PROCEDURE p1 TO 'bug48321_1'@'localhost',
'bug48321_2'@'localhost', 'bug48321_3'@'localhost';

REVOKE ALL PRIVILEGES, GRANT OPTION FROM CURRENT_USER(), 'bug48321_2'@'localhost';

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'REVOKE ALL PRIVILEGES, GRANT OPTION FROM $users_list'
CASE 3:
-------
# Two users are in the test statement, CURRENT_USER is the last one.
users_list= 'bug48321_2'@'localhost', CURRENT_USER()

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

# Grant some privileges to users at first when testing 
# 'REVOKE ...' statement.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_2'@'localhost',
'bug48321_3'@'localhost' WITH GRANT OPTION;
GRANT ALTER ROUTINE, EXECUTE ON PROCEDURE p1 TO 'bug48321_1'@'localhost',
'bug48321_2'@'localhost', 'bug48321_3'@'localhost';

REVOKE ALL PRIVILEGES, GRANT OPTION FROM 'bug48321_2'@'localhost', CURRENT_USER();

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'REVOKE ALL PRIVILEGES, GRANT OPTION FROM $users_list'
CASE 4:
-------
# Three users are in the test statement, CURRENT_USER is the second one.
users_list= 'bug48321_2'@'localhost', CURRENT_USER(), 'bug48321_3'@'localhost'

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

# Grant some privileges to users at first when testing 
# 'REVOKE ...' statement.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_2'@'localhost',
'bug48321_3'@'localhost' WITH GRANT OPTION;
GRANT ALTER ROUTINE, EXECUTE ON PROCEDURE p1 TO 'bug48321_1'@'localhost',
'bug48321_2'@'localhost', 'bug48321_3'@'localhost';

REVOKE ALL PRIVILEGES, GRANT OPTION FROM 'bug48321_2'@'localhost', CURRENT_USER(), 'bug48321_3'@'localhost';

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'REVOKE ALL PRIVILEGES, GRANT OPTION FROM $users_list'
CASE 5:
-------
# CURRENT_USER is not in the test statement.
users_list= 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

# Grant some privileges to users at first when testing 
# 'REVOKE ...' statement.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_2'@'localhost',
'bug48321_3'@'localhost' WITH GRANT OPTION;
GRANT ALTER ROUTINE, EXECUTE ON PROCEDURE p1 TO 'bug48321_1'@'localhost',
'bug48321_2'@'localhost', 'bug48321_3'@'localhost';

REVOKE ALL PRIVILEGES, GRANT OPTION FROM 'bug48321_2'@'localhost', 'bug48321_3'@'localhost';

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;
DROP VIEW test.bug48321_v1;



TEST STATEMENT: 'REVOKE ALL PRIVILEGES, GRANT OPTION FROM $users_list /*With comment*/'
--------------------------------------------------------------------------
CREATE VIEW test.bug48321_v1 AS SELECT user, Select_priv, Update_priv, Create_priv, Drop_priv, Grant_priv
FROM mysql.user WHERE user LIKE 'bug48321%';

TEST STATEMENT: 'REVOKE ALL PRIVILEGES, GRANT OPTION FROM $users_list /*With comment*/'
CASE 1:
-------
# Only CURRENT_USER() in the user list of the test statement.
users_list= CURRENT_USER()

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

# Grant some privileges to users at first when testing 
# 'REVOKE ...' statement.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_2'@'localhost',
'bug48321_3'@'localhost' WITH GRANT OPTION;
GRANT ALTER ROUTINE, EXECUTE ON PROCEDURE p1 TO 'bug48321_1'@'localhost',
'bug48321_2'@'localhost', 'bug48321_3'@'localhost';

REVOKE ALL PRIVILEGES, GRANT OPTION FROM CURRENT_USER() /*With comment*/;

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'REVOKE ALL PRIVILEGES, GRANT OPTION FROM $users_list /*With comment*/'
CASE 2:
-------
# Two users are in the test statement, CURRENT_USER is the first one.
users_list= CURRENT_USER(), 'bug48321_2'@'localhost'

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

# Grant some privileges to users at first when testing 
# 'REVOKE ...' statement.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_2'@'localhost',
'bug48321_3'@'localhost' WITH GRANT OPTION;
GRANT ALTER ROUTINE, EXECUTE ON PROCEDURE p1 TO 'bug48321_1'@'localhost',
'bug48321_2'@'localhost', 'bug48321_3'@'localhost';

REVOKE ALL PRIVILEGES, GRANT OPTION FROM CURRENT_USER(), 'bug48321_2'@'localhost' /*With comment*/;

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'REVOKE ALL PRIVILEGES, GRANT OPTION FROM $users_list /*With comment*/'
CASE 3:
-------
# Two users are in the test statement, CURRENT_USER is the last one.
users_list= 'bug48321_2'@'localhost', CURRENT_USER()

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

# Grant some privileges to users at first when testing 
# 'REVOKE ...' statement.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_2'@'localhost',
'bug48321_3'@'localhost' WITH GRANT OPTION;
GRANT ALTER ROUTINE, EXECUTE ON PROCEDURE p1 TO 'bug48321_1'@'localhost',
'bug48321_2'@'localhost', 'bug48321_3'@'localhost';

REVOKE ALL PRIVILEGES, GRANT OPTION FROM 'bug48321_2'@'localhost', CURRENT_USER() /*With comment*/;

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'REVOKE ALL PRIVILEGES, GRANT OPTION FROM $users_list /*With comment*/'
CASE 4:
-------
# Three users are in the test statement, CURRENT_USER is the second one.
users_list= 'bug48321_2'@'localhost', CURRENT_USER(), 'bug48321_3'@'localhost'

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

# Grant some privileges to users at first when testing 
# 'REVOKE ...' statement.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_2'@'localhost',
'bug48321_3'@'localhost' WITH GRANT OPTION;
GRANT ALTER ROUTINE, EXECUTE ON PROCEDURE p1 TO 'bug48321_1'@'localhost',
'bug48321_2'@'localhost', 'bug48321_3'@'localhost';

REVOKE ALL PRIVILEGES, GRANT OPTION FROM 'bug48321_2'@'localhost', CURRENT_USER(), 'bug48321_3'@'localhost' /*With comment*/;

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'REVOKE ALL PRIVILEGES, GRANT OPTION FROM $users_list /*With comment*/'
CASE 5:
-------
# CURRENT_USER is not in the test statement.
users_list= 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

# Grant some privileges to users at first when testing 
# 'REVOKE ...' statement.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_2'@'localhost',
'bug48321_3'@'localhost' WITH GRANT OPTION;
GRANT ALTER ROUTINE, EXECUTE ON PROCEDURE p1 TO 'bug48321_1'@'localhost',
'bug48321_2'@'localhost', 'bug48321_3'@'localhost';

REVOKE ALL PRIVILEGES, GRANT OPTION FROM 'bug48321_2'@'localhost', 'bug48321_3'@'localhost' /*With comment*/;

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;
DROP VIEW test.bug48321_v1;



TEST STATEMENT: 'REVOKE ALL PRIVILEGES, GRANT OPTION FROM /*With comment*/ $users_list'
--------------------------------------------------------------------------
CREATE VIEW test.bug48321_v1 AS SELECT user, Select_priv, Update_priv, Create_priv, Drop_priv, Grant_priv
FROM mysql.user WHERE user LIKE 'bug48321%';

TEST STATEMENT: 'REVOKE ALL PRIVILEGES, GRANT OPTION FROM /*With comment*/ $users_list'
CASE 1:
-------
# Only CURRENT_USER() in the user list of the test statement.
users_list= CURRENT_USER()

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

# Grant some privileges to users at first when testing 
# 'REVOKE ...' statement.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_2'@'localhost',
'bug48321_3'@'localhost' WITH GRANT OPTION;
GRANT ALTER ROUTINE, EXECUTE ON PROCEDURE p1 TO 'bug48321_1'@'localhost',
'bug48321_2'@'localhost', 'bug48321_3'@'localhost';

REVOKE ALL PRIVILEGES, GRANT OPTION FROM /*With comment*/ CURRENT_USER();

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'REVOKE ALL PRIVILEGES, GRANT OPTION FROM /*With comment*/ $users_list'
CASE 2:
-------
# Two users are in the test statement, CURRENT_USER is the first one.
users_list= CURRENT_USER(), 'bug48321_2'@'localhost'

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

# Grant some privileges to users at first when testing 
# 'REVOKE ...' statement.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_2'@'localhost',
'bug48321_3'@'localhost' WITH GRANT OPTION;
GRANT ALTER ROUTINE, EXECUTE ON PROCEDURE p1 TO 'bug48321_1'@'localhost',
'bug48321_2'@'localhost', 'bug48321_3'@'localhost';

REVOKE ALL PRIVILEGES, GRANT OPTION FROM /*With comment*/ CURRENT_USER(), 'bug48321_2'@'localhost';

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'REVOKE ALL PRIVILEGES, GRANT OPTION FROM /*With comment*/ $users_list'
CASE 3:
-------
# Two users are in the test statement, CURRENT_USER is the last one.
users_list= 'bug48321_2'@'localhost', CURRENT_USER()

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

# Grant some privileges to users at first when testing 
# 'REVOKE ...' statement.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_2'@'localhost',
'bug48321_3'@'localhost' WITH GRANT OPTION;
GRANT ALTER ROUTINE, EXECUTE ON PROCEDURE p1 TO 'bug48321_1'@'localhost',
'bug48321_2'@'localhost', 'bug48321_3'@'localhost';

REVOKE ALL PRIVILEGES, GRANT OPTION FROM /*With comment*/ 'bug48321_2'@'localhost', CURRENT_USER();

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'REVOKE ALL PRIVILEGES, GRANT OPTION FROM /*With comment*/ $users_list'
CASE 4:
-------
# Three users are in the test statement, CURRENT_USER is the second one.
users_list= 'bug48321_2'@'localhost', CURRENT_USER(), 'bug48321_3'@'localhost'

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

# Grant some privileges to users at first when testing 
# 'REVOKE ...' statement.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_2'@'localhost',
'bug48321_3'@'localhost' WITH GRANT OPTION;
GRANT ALTER ROUTINE, EXECUTE ON PROCEDURE p1 TO 'bug48321_1'@'localhost',
'bug48321_2'@'localhost', 'bug48321_3'@'localhost';

REVOKE ALL PRIVILEGES, GRANT OPTION FROM /*With comment*/ 'bug48321_2'@'localhost', CURRENT_USER(), 'bug48321_3'@'localhost';

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'REVOKE ALL PRIVILEGES, GRANT OPTION FROM /*With comment*/ $users_list'
CASE 5:
-------
# CURRENT_USER is not in the test statement.
users_list= 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

# Grant some privileges to users at first when testing 
# 'REVOKE ...' statement.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_2'@'localhost',
'bug48321_3'@'localhost' WITH GRANT OPTION;
GRANT ALTER ROUTINE, EXECUTE ON PROCEDURE p1 TO 'bug48321_1'@'localhost',
'bug48321_2'@'localhost', 'bug48321_3'@'localhost';

REVOKE ALL PRIVILEGES, GRANT OPTION FROM /*With comment*/ 'bug48321_2'@'localhost', 'bug48321_3'@'localhost';

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;
DROP VIEW test.bug48321_v1;



TEST STATEMENT: 'REVOKE SELECT, UPDATE, CREATE, DROP ON TABLE *.* FROM $users_list'
--------------------------------------------------------------------------
CREATE VIEW test.bug48321_v1 AS SELECT user, Select_priv, Update_priv, Create_priv, Drop_priv
FROM mysql.user WHERE user LIKE 'bug48321%';

TEST STATEMENT: 'REVOKE SELECT, UPDATE, CREATE, DROP ON TABLE *.* FROM $users_list'
CASE 1:
-------
# Only CURRENT_USER() in the user list of the test statement.
users_list= CURRENT_USER()

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

# Grant some privileges to users at first when testing 
# 'REVOKE ...' statement.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_2'@'localhost',
'bug48321_3'@'localhost' WITH GRANT OPTION;
GRANT ALTER ROUTINE, EXECUTE ON PROCEDURE p1 TO 'bug48321_1'@'localhost',
'bug48321_2'@'localhost', 'bug48321_3'@'localhost';

REVOKE SELECT, UPDATE, CREATE, DROP ON TABLE *.* FROM CURRENT_USER();

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'REVOKE SELECT, UPDATE, CREATE, DROP ON TABLE *.* FROM $users_list'
CASE 2:
-------
# Two users are in the test statement, CURRENT_USER is the first one.
users_list= CURRENT_USER(), 'bug48321_2'@'localhost'

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

# Grant some privileges to users at first when testing 
# 'REVOKE ...' statement.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_2'@'localhost',
'bug48321_3'@'localhost' WITH GRANT OPTION;
GRANT ALTER ROUTINE, EXECUTE ON PROCEDURE p1 TO 'bug48321_1'@'localhost',
'bug48321_2'@'localhost', 'bug48321_3'@'localhost';

REVOKE SELECT, UPDATE, CREATE, DROP ON TABLE *.* FROM CURRENT_USER(), 'bug48321_2'@'localhost';

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'REVOKE SELECT, UPDATE, CREATE, DROP ON TABLE *.* FROM $users_list'
CASE 3:
-------
# Two users are in the test statement, CURRENT_USER is the last one.
users_list= 'bug48321_2'@'localhost', CURRENT_USER()

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

# Grant some privileges to users at first when testing 
# 'REVOKE ...' statement.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_2'@'localhost',
'bug48321_3'@'localhost' WITH GRANT OPTION;
GRANT ALTER ROUTINE, EXECUTE ON PROCEDURE p1 TO 'bug48321_1'@'localhost',
'bug48321_2'@'localhost', 'bug48321_3'@'localhost';

REVOKE SELECT, UPDATE, CREATE, DROP ON TABLE *.* FROM 'bug48321_2'@'localhost', CURRENT_USER();

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'REVOKE SELECT, UPDATE, CREATE, DROP ON TABLE *.* FROM $users_list'
CASE 4:
-------
# Three users are in the test statement, CURRENT_USER is the second one.
users_list= 'bug48321_2'@'localhost', CURRENT_USER(), 'bug48321_3'@'localhost'

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

# Grant some privileges to users at first when testing 
# 'REVOKE ...' statement.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_2'@'localhost',
'bug48321_3'@'localhost' WITH GRANT OPTION;
GRANT ALTER ROUTINE, EXECUTE ON PROCEDURE p1 TO 'bug48321_1'@'localhost',
'bug48321_2'@'localhost', 'bug48321_3'@'localhost';

REVOKE SELECT, UPDATE, CREATE, DROP ON TABLE *.* FROM 'bug48321_2'@'localhost', CURRENT_USER(), 'bug48321_3'@'localhost';

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'REVOKE SELECT, UPDATE, CREATE, DROP ON TABLE *.* FROM $users_list'
CASE 5:
-------
# CURRENT_USER is not in the test statement.
users_list= 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

# Grant some privileges to users at first when testing 
# 'REVOKE ...' statement.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_2'@'localhost',
'bug48321_3'@'localhost' WITH GRANT OPTION;
GRANT ALTER ROUTINE, EXECUTE ON PROCEDURE p1 TO 'bug48321_1'@'localhost',
'bug48321_2'@'localhost', 'bug48321_3'@'localhost';

REVOKE SELECT, UPDATE, CREATE, DROP ON TABLE *.* FROM 'bug48321_2'@'localhost', 'bug48321_3'@'localhost';

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;
DROP VIEW test.bug48321_v1;



TEST STATEMENT: 'REVOKE CREATE ROUTINE ON *.* FROM $users_list'
--------------------------------------------------------------------------
CREATE VIEW test.bug48321_v1 AS SELECT user, Create_routine_priv
FROM mysql.user WHERE user LIKE 'bug48321%';

TEST STATEMENT: 'REVOKE CREATE ROUTINE ON *.* FROM $users_list'
CASE 1:
-------
# Only CURRENT_USER() in the user list of the test statement.
users_list= CURRENT_USER()

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

# Grant some privileges to users at first when testing 
# 'REVOKE ...' statement.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_2'@'localhost',
'bug48321_3'@'localhost' WITH GRANT OPTION;
GRANT ALTER ROUTINE, EXECUTE ON PROCEDURE p1 TO 'bug48321_1'@'localhost',
'bug48321_2'@'localhost', 'bug48321_3'@'localhost';

REVOKE CREATE ROUTINE ON *.* FROM CURRENT_USER();

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'REVOKE CREATE ROUTINE ON *.* FROM $users_list'
CASE 2:
-------
# Two users are in the test statement, CURRENT_USER is the first one.
users_list= CURRENT_USER(), 'bug48321_2'@'localhost'

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

# Grant some privileges to users at first when testing 
# 'REVOKE ...' statement.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_2'@'localhost',
'bug48321_3'@'localhost' WITH GRANT OPTION;
GRANT ALTER ROUTINE, EXECUTE ON PROCEDURE p1 TO 'bug48321_1'@'localhost',
'bug48321_2'@'localhost', 'bug48321_3'@'localhost';

REVOKE CREATE ROUTINE ON *.* FROM CURRENT_USER(), 'bug48321_2'@'localhost';

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'REVOKE CREATE ROUTINE ON *.* FROM $users_list'
CASE 3:
-------
# Two users are in the test statement, CURRENT_USER is the last one.
users_list= 'bug48321_2'@'localhost', CURRENT_USER()

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

# Grant some privileges to users at first when testing 
# 'REVOKE ...' statement.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_2'@'localhost',
'bug48321_3'@'localhost' WITH GRANT OPTION;
GRANT ALTER ROUTINE, EXECUTE ON PROCEDURE p1 TO 'bug48321_1'@'localhost',
'bug48321_2'@'localhost', 'bug48321_3'@'localhost';

REVOKE CREATE ROUTINE ON *.* FROM 'bug48321_2'@'localhost', CURRENT_USER();

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'REVOKE CREATE ROUTINE ON *.* FROM $users_list'
CASE 4:
-------
# Three users are in the test statement, CURRENT_USER is the second one.
users_list= 'bug48321_2'@'localhost', CURRENT_USER(), 'bug48321_3'@'localhost'

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

# Grant some privileges to users at first when testing 
# 'REVOKE ...' statement.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_2'@'localhost',
'bug48321_3'@'localhost' WITH GRANT OPTION;
GRANT ALTER ROUTINE, EXECUTE ON PROCEDURE p1 TO 'bug48321_1'@'localhost',
'bug48321_2'@'localhost', 'bug48321_3'@'localhost';

REVOKE CREATE ROUTINE ON *.* FROM 'bug48321_2'@'localhost', CURRENT_USER(), 'bug48321_3'@'localhost';

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'REVOKE CREATE ROUTINE ON *.* FROM $users_list'
CASE 5:
-------
# CURRENT_USER is not in the test statement.
users_list= 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

# Grant some privileges to users at first when testing 
# 'REVOKE ...' statement.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_2'@'localhost',
'bug48321_3'@'localhost' WITH GRANT OPTION;
GRANT ALTER ROUTINE, EXECUTE ON PROCEDURE p1 TO 'bug48321_1'@'localhost',
'bug48321_2'@'localhost', 'bug48321_3'@'localhost';

REVOKE CREATE ROUTINE ON *.* FROM 'bug48321_2'@'localhost', 'bug48321_3'@'localhost';

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;
DROP VIEW test.bug48321_v1;



TEST STATEMENT: 'REVOKE ALTER ROUTINE, EXECUTE ON PROCEDURE p1 FROM $users_list'
--------------------------------------------------------------------------
CREATE VIEW test.bug48321_v1 AS SELECT user, Routine_name, Proc_priv
FROM mysql.procs_priv WHERE user LIKE 'bug48321%';

TEST STATEMENT: 'REVOKE ALTER ROUTINE, EXECUTE ON PROCEDURE p1 FROM $users_list'
CASE 1:
-------
# Only CURRENT_USER() in the user list of the test statement.
users_list= CURRENT_USER()

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

# Grant some privileges to users at first when testing 
# 'REVOKE ...' statement.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_2'@'localhost',
'bug48321_3'@'localhost' WITH GRANT OPTION;
GRANT ALTER ROUTINE, EXECUTE ON PROCEDURE p1 TO 'bug48321_1'@'localhost',
'bug48321_2'@'localhost', 'bug48321_3'@'localhost';

REVOKE ALTER ROUTINE, EXECUTE ON PROCEDURE p1 FROM CURRENT_USER();

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'REVOKE ALTER ROUTINE, EXECUTE ON PROCEDURE p1 FROM $users_list'
CASE 2:
-------
# Two users are in the test statement, CURRENT_USER is the first one.
users_list= CURRENT_USER(), 'bug48321_2'@'localhost'

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

# Grant some privileges to users at first when testing 
# 'REVOKE ...' statement.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_2'@'localhost',
'bug48321_3'@'localhost' WITH GRANT OPTION;
GRANT ALTER ROUTINE, EXECUTE ON PROCEDURE p1 TO 'bug48321_1'@'localhost',
'bug48321_2'@'localhost', 'bug48321_3'@'localhost';

REVOKE ALTER ROUTINE, EXECUTE ON PROCEDURE p1 FROM CURRENT_USER(), 'bug48321_2'@'localhost';

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'REVOKE ALTER ROUTINE, EXECUTE ON PROCEDURE p1 FROM $users_list'
CASE 3:
-------
# Two users are in the test statement, CURRENT_USER is the last one.
users_list= 'bug48321_2'@'localhost', CURRENT_USER()

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

# Grant some privileges to users at first when testing 
# 'REVOKE ...' statement.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_2'@'localhost',
'bug48321_3'@'localhost' WITH GRANT OPTION;
GRANT ALTER ROUTINE, EXECUTE ON PROCEDURE p1 TO 'bug48321_1'@'localhost',
'bug48321_2'@'localhost', 'bug48321_3'@'localhost';

REVOKE ALTER ROUTINE, EXECUTE ON PROCEDURE p1 FROM 'bug48321_2'@'localhost', CURRENT_USER();

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'REVOKE ALTER ROUTINE, EXECUTE ON PROCEDURE p1 FROM $users_list'
CASE 4:
-------
# Three users are in the test statement, CURRENT_USER is the second one.
users_list= 'bug48321_2'@'localhost', CURRENT_USER(), 'bug48321_3'@'localhost'

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

# Grant some privileges to users at first when testing 
# 'REVOKE ...' statement.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_2'@'localhost',
'bug48321_3'@'localhost' WITH GRANT OPTION;
GRANT ALTER ROUTINE, EXECUTE ON PROCEDURE p1 TO 'bug48321_1'@'localhost',
'bug48321_2'@'localhost', 'bug48321_3'@'localhost';

REVOKE ALTER ROUTINE, EXECUTE ON PROCEDURE p1 FROM 'bug48321_2'@'localhost', CURRENT_USER(), 'bug48321_3'@'localhost';

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'REVOKE ALTER ROUTINE, EXECUTE ON PROCEDURE p1 FROM $users_list'
CASE 5:
-------
# CURRENT_USER is not in the test statement.
users_list= 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

# Grant some privileges to users at first when testing 
# 'REVOKE ...' statement.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_2'@'localhost',
'bug48321_3'@'localhost' WITH GRANT OPTION;
GRANT ALTER ROUTINE, EXECUTE ON PROCEDURE p1 TO 'bug48321_1'@'localhost',
'bug48321_2'@'localhost', 'bug48321_3'@'localhost';

REVOKE ALTER ROUTINE, EXECUTE ON PROCEDURE p1 FROM 'bug48321_2'@'localhost', 'bug48321_3'@'localhost';

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;
DROP VIEW test.bug48321_v1;



TEST STATEMENT: 'GRANT ALL PRIVILEGES ON *.* TO $users_list WITH GRANT OPTION'
--------------------------------------------------------------------------
CREATE VIEW test.bug48321_v1 AS SELECT user, Select_priv, Update_priv, Create_priv, Drop_priv, Grant_priv, Password
FROM mysql.user WHERE user LIKE 'bug48321%';

TEST STATEMENT: 'GRANT ALL PRIVILEGES ON *.* TO $users_list WITH GRANT OPTION'
CASE 1:
-------
# Only CURRENT_USER() in the user list of the test statement.
users_list= CURRENT_USER() IDENTIFIED BY 'user1'

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

GRANT ALL PRIVILEGES ON *.* TO CURRENT_USER() IDENTIFIED BY 'user1' WITH GRANT OPTION;

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'GRANT ALL PRIVILEGES ON *.* TO $users_list WITH GRANT OPTION'
CASE 2:
-------
# Two users are in the test statement, CURRENT_USER is the first one.
users_list= CURRENT_USER() IDENTIFIED BY 'user1', 'bug48321_2'@'localhost'

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

GRANT ALL PRIVILEGES ON *.* TO CURRENT_USER() IDENTIFIED BY 'user1', 'bug48321_2'@'localhost' WITH GRANT OPTION;

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'GRANT ALL PRIVILEGES ON *.* TO $users_list WITH GRANT OPTION'
CASE 3:
-------
# Two users are in the test statement, CURRENT_USER is the last one.
users_list= 'bug48321_2'@'localhost', CURRENT_USER() IDENTIFIED BY 'user1'

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

GRANT ALL PRIVILEGES ON *.* TO 'bug48321_2'@'localhost', CURRENT_USER() IDENTIFIED BY 'user1' WITH GRANT OPTION;

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'GRANT ALL PRIVILEGES ON *.* TO $users_list WITH GRANT OPTION'
CASE 4:
-------
# Three users are in the test statement, CURRENT_USER is the second one.
users_list= 'bug48321_2'@'localhost', CURRENT_USER() IDENTIFIED BY 'user1', 'bug48321_3'@'localhost' IDENTIFIED BY ''

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

GRANT ALL PRIVILEGES ON *.* TO 'bug48321_2'@'localhost', CURRENT_USER() IDENTIFIED BY 'user1', 'bug48321_3'@'localhost' IDENTIFIED BY '' WITH GRANT OPTION;

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'GRANT ALL PRIVILEGES ON *.* TO $users_list WITH GRANT OPTION'
CASE 5:
-------
# CURRENT_USER is not in the test statement.
users_list= 'bug48321_2'@'localhost', 'bug48321_3'@'localhost' IDENTIFIED BY ''

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

GRANT ALL PRIVILEGES ON *.* TO 'bug48321_2'@'localhost', 'bug48321_3'@'localhost' IDENTIFIED BY '' WITH GRANT OPTION;

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;
DROP VIEW test.bug48321_v1;



TEST STATEMENT: 'GRANT ALL PRIVILEGES ON *.* TO $users_list /* With Comment */ WITH GRANT OPTION'
--------------------------------------------------------------------------
CREATE VIEW test.bug48321_v1 AS SELECT user, Select_priv, Update_priv, Create_priv, Drop_priv, Grant_priv, Password
FROM mysql.user WHERE user LIKE 'bug48321%';

TEST STATEMENT: 'GRANT ALL PRIVILEGES ON *.* TO $users_list /* With Comment */ WITH GRANT OPTION'
CASE 1:
-------
# Only CURRENT_USER() in the user list of the test statement.
users_list= CURRENT_USER() IDENTIFIED BY 'user1'

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

GRANT ALL PRIVILEGES ON *.* TO CURRENT_USER() IDENTIFIED BY 'user1' /* With Comment */ WITH GRANT OPTION;

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'GRANT ALL PRIVILEGES ON *.* TO $users_list /* With Comment */ WITH GRANT OPTION'
CASE 2:
-------
# Two users are in the test statement, CURRENT_USER is the first one.
users_list= CURRENT_USER() IDENTIFIED BY 'user1', 'bug48321_2'@'localhost'

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

GRANT ALL PRIVILEGES ON *.* TO CURRENT_USER() IDENTIFIED BY 'user1', 'bug48321_2'@'localhost' /* With Comment */ WITH GRANT OPTION;

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'GRANT ALL PRIVILEGES ON *.* TO $users_list /* With Comment */ WITH GRANT OPTION'
CASE 3:
-------
# Two users are in the test statement, CURRENT_USER is the last one.
users_list= 'bug48321_2'@'localhost', CURRENT_USER() IDENTIFIED BY 'user1'

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

GRANT ALL PRIVILEGES ON *.* TO 'bug48321_2'@'localhost', CURRENT_USER() IDENTIFIED BY 'user1' /* With Comment */ WITH GRANT OPTION;

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'GRANT ALL PRIVILEGES ON *.* TO $users_list /* With Comment */ WITH GRANT OPTION'
CASE 4:
-------
# Three users are in the test statement, CURRENT_USER is the second one.
users_list= 'bug48321_2'@'localhost', CURRENT_USER() IDENTIFIED BY 'user1', 'bug48321_3'@'localhost' IDENTIFIED BY ''

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

GRANT ALL PRIVILEGES ON *.* TO 'bug48321_2'@'localhost', CURRENT_USER() IDENTIFIED BY 'user1', 'bug48321_3'@'localhost' IDENTIFIED BY '' /* With Comment */ WITH GRANT OPTION;

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'GRANT ALL PRIVILEGES ON *.* TO $users_list /* With Comment */ WITH GRANT OPTION'
CASE 5:
-------
# CURRENT_USER is not in the test statement.
users_list= 'bug48321_2'@'localhost', 'bug48321_3'@'localhost' IDENTIFIED BY ''

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

GRANT ALL PRIVILEGES ON *.* TO 'bug48321_2'@'localhost', 'bug48321_3'@'localhost' IDENTIFIED BY '' /* With Comment */ WITH GRANT OPTION;

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;
DROP VIEW test.bug48321_v1;



TEST STATEMENT: 'GRANT SELECT, UPDATE, CREATE, DROP ON TABLE *.* TO $users_list'
--------------------------------------------------------------------------
CREATE VIEW test.bug48321_v1 AS SELECT user, Select_priv, Update_priv, Create_priv, Drop_priv, Password
FROM mysql.user WHERE user LIKE 'bug48321%';

TEST STATEMENT: 'GRANT SELECT, UPDATE, CREATE, DROP ON TABLE *.* TO $users_list'
CASE 1:
-------
# Only CURRENT_USER() in the user list of the test statement.
users_list= CURRENT_USER() IDENTIFIED BY 'user1'

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

GRANT SELECT, UPDATE, CREATE, DROP ON TABLE *.* TO CURRENT_USER() IDENTIFIED BY 'user1';

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'GRANT SELECT, UPDATE, CREATE, DROP ON TABLE *.* TO $users_list'
CASE 2:
-------
# Two users are in the test statement, CURRENT_USER is the first one.
users_list= CURRENT_USER() IDENTIFIED BY 'user1', 'bug48321_2'@'localhost'

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

GRANT SELECT, UPDATE, CREATE, DROP ON TABLE *.* TO CURRENT_USER() IDENTIFIED BY 'user1', 'bug48321_2'@'localhost';

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'GRANT SELECT, UPDATE, CREATE, DROP ON TABLE *.* TO $users_list'
CASE 3:
-------
# Two users are in the test statement, CURRENT_USER is the last one.
users_list= 'bug48321_2'@'localhost', CURRENT_USER() IDENTIFIED BY 'user1'

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

GRANT SELECT, UPDATE, CREATE, DROP ON TABLE *.* TO 'bug48321_2'@'localhost', CURRENT_USER() IDENTIFIED BY 'user1';

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'GRANT SELECT, UPDATE, CREATE, DROP ON TABLE *.* TO $users_list'
CASE 4:
-------
# Three users are in the test statement, CURRENT_USER is the second one.
users_list= 'bug48321_2'@'localhost', CURRENT_USER() IDENTIFIED BY 'user1', 'bug48321_3'@'localhost' IDENTIFIED BY ''

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

GRANT SELECT, UPDATE, CREATE, DROP ON TABLE *.* TO 'bug48321_2'@'localhost', CURRENT_USER() IDENTIFIED BY 'user1', 'bug48321_3'@'localhost' IDENTIFIED BY '';

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'GRANT SELECT, UPDATE, CREATE, DROP ON TABLE *.* TO $users_list'
CASE 5:
-------
# CURRENT_USER is not in the test statement.
users_list= 'bug48321_2'@'localhost', 'bug48321_3'@'localhost' IDENTIFIED BY ''

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

GRANT SELECT, UPDATE, CREATE, DROP ON TABLE *.* TO 'bug48321_2'@'localhost', 'bug48321_3'@'localhost' IDENTIFIED BY '';

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;
DROP VIEW test.bug48321_v1;



TEST STATEMENT: 'GRANT CREATE ROUTINE ON *.* TO $users_list'
--------------------------------------------------------------------------
CREATE VIEW test.bug48321_v1 AS SELECT user, Create_routine_priv
FROM mysql.user WHERE user LIKE 'bug48321%';

TEST STATEMENT: 'GRANT CREATE ROUTINE ON *.* TO $users_list'
CASE 1:
-------
# Only CURRENT_USER() in the user list of the test statement.
users_list= CURRENT_USER() IDENTIFIED BY 'user1'

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

GRANT CREATE ROUTINE ON *.* TO CURRENT_USER() IDENTIFIED BY 'user1';

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'GRANT CREATE ROUTINE ON *.* TO $users_list'
CASE 2:
-------
# Two users are in the test statement, CURRENT_USER is the first one.
users_list= CURRENT_USER() IDENTIFIED BY 'user1', 'bug48321_2'@'localhost'

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

GRANT CREATE ROUTINE ON *.* TO CURRENT_USER() IDENTIFIED BY 'user1', 'bug48321_2'@'localhost';

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'GRANT CREATE ROUTINE ON *.* TO $users_list'
CASE 3:
-------
# Two users are in the test statement, CURRENT_USER is the last one.
users_list= 'bug48321_2'@'localhost', CURRENT_USER() IDENTIFIED BY 'user1'

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

GRANT CREATE ROUTINE ON *.* TO 'bug48321_2'@'localhost', CURRENT_USER() IDENTIFIED BY 'user1';

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'GRANT CREATE ROUTINE ON *.* TO $users_list'
CASE 4:
-------
# Three users are in the test statement, CURRENT_USER is the second one.
users_list= 'bug48321_2'@'localhost', CURRENT_USER() IDENTIFIED BY 'user1', 'bug48321_3'@'localhost' IDENTIFIED BY ''

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

GRANT CREATE ROUTINE ON *.* TO 'bug48321_2'@'localhost', CURRENT_USER() IDENTIFIED BY 'user1', 'bug48321_3'@'localhost' IDENTIFIED BY '';

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'GRANT CREATE ROUTINE ON *.* TO $users_list'
CASE 5:
-------
# CURRENT_USER is not in the test statement.
users_list= 'bug48321_2'@'localhost', 'bug48321_3'@'localhost' IDENTIFIED BY ''

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

GRANT CREATE ROUTINE ON *.* TO 'bug48321_2'@'localhost', 'bug48321_3'@'localhost' IDENTIFIED BY '';

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;
DROP VIEW test.bug48321_v1;
DROP PROCEDURE p1;



TEST STATEMENT: 'GRANT ALTER ROUTINE, EXECUTE ON PROCEDURE p1 TO $users_list'
--------------------------------------------------------------------------
CREATE VIEW test.bug48321_v1 AS SELECT user, Routine_name, Proc_priv
FROM mysql.procs_priv WHERE user LIKE 'bug48321%';

TEST STATEMENT: 'GRANT ALTER ROUTINE, EXECUTE ON PROCEDURE p1 TO $users_list'
CASE 1:
-------
# Only CURRENT_USER() in the user list of the test statement.
users_list= CURRENT_USER() IDENTIFIED BY 'user1'

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

GRANT ALTER ROUTINE, EXECUTE ON PROCEDURE p1 TO CURRENT_USER() IDENTIFIED BY 'user1';

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'GRANT ALTER ROUTINE, EXECUTE ON PROCEDURE p1 TO $users_list'
CASE 2:
-------
# Two users are in the test statement, CURRENT_USER is the first one.
users_list= CURRENT_USER() IDENTIFIED BY 'user1', 'bug48321_2'@'localhost'

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

GRANT ALTER ROUTINE, EXECUTE ON PROCEDURE p1 TO CURRENT_USER() IDENTIFIED BY 'user1', 'bug48321_2'@'localhost';

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'GRANT ALTER ROUTINE, EXECUTE ON PROCEDURE p1 TO $users_list'
CASE 3:
-------
# Two users are in the test statement, CURRENT_USER is the last one.
users_list= 'bug48321_2'@'localhost', CURRENT_USER() IDENTIFIED BY 'user1'

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

GRANT ALTER ROUTINE, EXECUTE ON PROCEDURE p1 TO 'bug48321_2'@'localhost', CURRENT_USER() IDENTIFIED BY 'user1';

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'GRANT ALTER ROUTINE, EXECUTE ON PROCEDURE p1 TO $users_list'
CASE 4:
-------
# Three users are in the test statement, CURRENT_USER is the second one.
users_list= 'bug48321_2'@'localhost', CURRENT_USER() IDENTIFIED BY 'user1', 'bug48321_3'@'localhost' IDENTIFIED BY ''

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

GRANT ALTER ROUTINE, EXECUTE ON PROCEDURE p1 TO 'bug48321_2'@'localhost', CURRENT_USER() IDENTIFIED BY 'user1', 'bug48321_3'@'localhost' IDENTIFIED BY '';

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;

TEST STATEMENT: 'GRANT ALTER ROUTINE, EXECUTE ON PROCEDURE p1 TO $users_list'
CASE 5:
-------
# CURRENT_USER is not in the test statement.
users_list= 'bug48321_2'@'localhost', 'bug48321_3'@'localhost' IDENTIFIED BY ''

# Connect to master with user1, so user1 always is the current user,
# when test statement is runing.
GRANT ALL PRIVILEGES ON *.* TO 'bug48321_1'@'localhost'
       WITH GRANT OPTION;
CREATE USER 'bug48321_2'@'localhost', 'bug48321_3'@'localhost'
       IDENTIFIED BY 'user3';

GRANT ALTER ROUTINE, EXECUTE ON PROCEDURE p1 TO 'bug48321_2'@'localhost', 'bug48321_3'@'localhost' IDENTIFIED BY '';

Comparing tables master:test.bug48321_v1 and slave:test.bug48321_v1

# Delete all bug48321% users
DELETE FROM mysql.user WHERE user LIKE 'bug48321%';
DELETE FROM mysql.procs_priv WHERE user LIKE 'bug48321%';
FLUSH PRIVILEGES;
DROP VIEW test.bug48321_v1;
